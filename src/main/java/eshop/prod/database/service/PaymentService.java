package eshop.prod.database.service;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import eshop.prod.database.entities.Payment;
import eshop.prod.database.entities.dto.PaymentDTO;
import eshop.prod.database.entities.mappers.PaymentMapper;
import eshop.prod.database.repository.OrderRepository;
import eshop.prod.database.repository.PaymentRepository;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class PaymentService {
    /* C-> CREATE R-> READ U-> UPDATE D-> DELETE */
    @Autowired
    private PaymentRepository paymentRepository;

    @Autowired
    private OrderRepository orderRepository;
    // READ ALL
    public List<PaymentDTO> getAllPayments() {
        try {
            List<Payment> payments = paymentRepository.findAll();
            return payments.stream().map(PaymentMapper.INSTANCE::paymentToPaymentDTO).toList();
        } catch (Exception e) {
            log.error("Error getting all payments", e);
        }
        return List.of();
    }

    // READ ID
    public PaymentDTO getPaymentById(Long id) {
        try {
            if (id==null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Payment payment = paymentRepository.findById(id).orElse(null);
            return PaymentMapper.INSTANCE.paymentToPaymentDTO(payment);
        } catch (Exception e) {
            log.error("Error getting payment by id", e);
        }
        return null;
    }

    // CREATE
    public PaymentDTO createPayment(PaymentDTO paymentDTO) {
        try {
            if (paymentDTO.getId_payment() != null) {
                throw new IllegalArgumentException("Id will be generated by database");
            }
            Payment payment = PaymentMapper.INSTANCE.paymentDTOToPayment(paymentDTO, orderRepository);
            if (payment==null) {
                throw new IllegalArgumentException("Payment cannot be null");
            }
            payment = paymentRepository.save(payment);
            return PaymentMapper.INSTANCE.paymentToPaymentDTO(payment);

        } catch (Exception e) {
            log.error("Error creating payment", e);
        }
        return null;
    }

    // UPDATE
    public PaymentDTO updatePayment(Long id, PaymentDTO paymentDTO) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Payment paymentFromDB = paymentRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Payment not found"));
            Payment payment = PaymentMapper.INSTANCE.paymentDTOToPayment(paymentDTO, orderRepository);
            if (payment==null) {
                throw new IllegalArgumentException("Payment cannot be null");
            }
            paymentFromDB.updateOnllyNecesary(payment);
            Payment savedPayment = paymentRepository.save(paymentFromDB);
            return PaymentMapper.INSTANCE.paymentToPaymentDTO(savedPayment);
        } catch (Exception e) {
            log.error("Error updating payment", e);
        }
        return null;
    }

    // DELETE
    public boolean deletePayment(Long id) {
        try {
            if (id==null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Payment payment = paymentRepository.findById(id).orElse(null);
            if (payment==null) {
                throw new IllegalArgumentException("Payment cannot be null");
            }
            paymentRepository.delete(payment);
            return true;
        } catch (Exception e) {
            log.error("Error deleting payment", e);
        }
        return false;
    }

    /* MÃ©todos del repository */
    /* Retrieve payments within a date range */
    public List<PaymentDTO> findByDate(Timestamp date1, Timestamp date2) {
        try {
            List<Payment> payments = paymentRepository.findByDateBetween(date1, date2).orElse(null);
            if (payments==null) {
                throw new IllegalArgumentException("Payments cannot be null");
            }
            return payments.stream().map(PaymentMapper.INSTANCE::paymentToPaymentDTO).toList();
        } catch (Exception e) {
            log.error("Error getting payments by date", e);
        }
        return List.of();
    }

    /* Retrieve payments by an order identifier and payment method */
    public PaymentDTO findByOrderIdAndPaymentMethod(Long orderId, String paymentMethod) {
        try {
            if (orderId==null) {
                throw new IllegalArgumentException("orderId cannot be null");
            }
            Payment payments = paymentRepository.findByOrderIdAndPaymentMethod(orderId, paymentMethod).orElse(null);
            if (payments==null) {
                throw new IllegalArgumentException("Payments cannot be null");
            }
            return PaymentMapper.INSTANCE.paymentToPaymentDTO(payments);
        } catch (Exception e) {
            log.error("Error getting payments by order id and payment method", e);
        }
        return null;
    }
}
