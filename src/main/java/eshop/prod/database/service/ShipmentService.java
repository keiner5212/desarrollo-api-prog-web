package eshop.prod.database.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import eshop.prod.database.entities.Shipment;
import eshop.prod.database.entities.dto.ShipmentDTO;
import eshop.prod.database.entities.mappers.ShipmentMapper;
import eshop.prod.database.repository.OrderRepository;
import eshop.prod.database.repository.ShipmentRepository;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class ShipmentService {
    // CRUD create, read, update, delete
    @Autowired
    private ShipmentRepository shipmentRepository;

    @Autowired
    private OrderRepository orderRepository;

    // READ ALL
    public List<ShipmentDTO> getAllShipments() {
        try {
            List<Shipment> shipments = shipmentRepository.findAll();
            return shipments.stream().map(ShipmentMapper.INSTANCE::shipmentToShipmentDTO).toList();
        } catch (Exception e) {
            log.error("Error getting all shipments", e);
        }
        return List.of();
    }

    // READ ID
    public ShipmentDTO getShipmentById(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Shipment shipment = shipmentRepository.findById(id).orElse(null);
            return ShipmentMapper.INSTANCE.shipmentToShipmentDTO(shipment);
        } catch (Exception e) {
            log.error("Error getting shipment by id", e);
        }
        return null;
    }

    // CREATE
    public ShipmentDTO createShipment(ShipmentDTO shipmentDTO) {
        try {
            if (shipmentDTO.getId_shipment() != null) {
                throw new IllegalArgumentException("Id will be generated by database");
            }
            Shipment shipment = ShipmentMapper.INSTANCE.shipmentDTOToShipment(shipmentDTO, orderRepository);
            if (shipment == null) {
                throw new IllegalArgumentException("Shipment cannot be null");
            }
            shipment = shipmentRepository.save(shipment);
            return ShipmentMapper.INSTANCE.shipmentToShipmentDTO(shipment);
        } catch (Exception e) {
            log.error("Error creating shipment", e);
        }
        return null;
    }

    // UPDATE
    public ShipmentDTO updateShipment(Long id, ShipmentDTO shipmentDTO) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Shipment shipmentFromDB = shipmentRepository.findById(id).orElse(null);
            if (shipmentFromDB == null) {
                throw new IllegalArgumentException("shipmentFromDB not found");
            }

            Shipment shipment = ShipmentMapper.INSTANCE.shipmentDTOToShipment(shipmentDTO, orderRepository);
            if (shipment == null) {
                throw new IllegalArgumentException("Shipment cannot be null");
            }
            shipmentFromDB.updateOnlyNecessary(shipment);
            Shipment shipmentSaved = shipmentRepository.save(shipmentFromDB);
            return ShipmentMapper.INSTANCE.shipmentToShipmentDTO(shipmentSaved);
        } catch (Exception e) {
            log.error("Error updating shipment", e);
        }
        return null;
    }

    // DELETE
    public boolean deleteShipment(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Shipment shipment = shipmentRepository.findById(id).orElse(null);
            if (shipment == null) {
                throw new IllegalArgumentException("Shipment not found");
            }
            shipmentRepository.delete(shipment);
            return true;
        } catch (Exception e) {
            log.error("Error deleting shipment", e);
        }
        return false;
    }

    // metodos del repository
    // Find shipping details by order ID

    public ShipmentDTO findByOrderId(Long orderId) {
        try {
            if (orderId == null) {
                throw new IllegalArgumentException("orderId cannot be null");
            }
            Shipment shipments = shipmentRepository.findByOrderId(orderId).orElse(null);
            if (shipments == null) {
                throw new IllegalArgumentException("Shipment not found");
            }
            return ShipmentMapper.INSTANCE.shipmentToShipmentDTO(shipments);
        } catch (Exception e) {
            log.error("Error getting shipment by order id", e);
        }
        return null;
    }

    // Find shipping details by tracking number
    public List<ShipmentDTO> findBycarrier(String nameCarrier) {
        try {
            List<Shipment> shipments = shipmentRepository.findByCarrier(nameCarrier).orElse(null);
            if (shipments == null) {
                throw new IllegalArgumentException("Shipment not found");
            }
            return shipments.stream().map(ShipmentMapper.INSTANCE::shipmentToShipmentDTO).toList();
        } catch (Exception e) {
            log.error("Error getting shipment by tracking number", e);
        }
        return List.of();
    }

    /* Find shipping details by state */
    public List<ShipmentDTO> findByState(String state) {
        try {
            List<Shipment> shipments = shipmentRepository.findByStatus(state).orElse(null);
            if (shipments == null) {
                throw new IllegalArgumentException("Shipment not found");
            }
            return shipments.stream().map(ShipmentMapper.INSTANCE::shipmentToShipmentDTO).toList();
        } catch (Exception e) {
            log.error("Error getting shipment by state", e);
        }
        return List.of();
    }

}
