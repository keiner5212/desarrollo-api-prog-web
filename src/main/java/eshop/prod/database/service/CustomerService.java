package eshop.prod.database.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import eshop.prod.database.entities.Customer;
import eshop.prod.database.entities.dto.CustomerDTO;
import eshop.prod.database.entities.mappers.CustomerMapper;
import eshop.prod.database.repository.CustomerRepository;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class CustomerService {
    @Autowired
    private CustomerRepository customerRepository;

    /** get all customers */
    public List<CustomerDTO> getAllCustomers() {
        try {
            List<Customer> customers = customerRepository.findAll();
            return customers.stream().map(CustomerMapper.INSTANCE::customerToCustomerDTO).toList();
        } catch (Exception e) {
            log.error("Error getting all customers", e);
        }

        return List.of();
    }

    /** get customer by id */
    public CustomerDTO getCustomerById(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Customer customer = customerRepository.findById(id).orElse(null);
            return CustomerMapper.INSTANCE.customerToCustomerDTO(customer);
        } catch (Exception e) {
            log.error("Error getting customer by id", e);
        }

        return null;
    }

    /** get customer by email */
    public CustomerDTO getCustomerByEmail(String email) {
        try {
            Customer customer = customerRepository.findByEmail(email).orElse(null);
            if (customer == null) {
                throw new IllegalArgumentException("Customer not found");
            }
            return CustomerMapper.INSTANCE.customerToCustomerDTO(customer);
        } catch (Exception e) {
            log.error("Error getting customer by email", e);
        }

        return null;
    }

    /** get customer by address */
    public List<CustomerDTO> getCustomerByAddress(String address) {
        try {
            List<Customer> customers = customerRepository.findByAddress(address).orElse(null);
            if (customers == null) {
                throw new IllegalArgumentException("Customer not found");
            }
            return customers.stream().map(CustomerMapper.INSTANCE::customerToCustomerDTO).toList();
        } catch (Exception e) {
            log.error("Error getting customer by address", e);
        }

        return List.of();
    }

    /** get customer by name (start like) */
    public List<CustomerDTO> getCustomerByNameStartingWith(String name) {
        try {
            List<Customer> customers = customerRepository.findByNameStartingWith(name).orElse(null);
            if (customers == null) {
                throw new IllegalArgumentException("Customer not found");
            }
            return customers.stream().map(CustomerMapper.INSTANCE::customerToCustomerDTO).toList();
        } catch (Exception e) {
            log.error("Error getting customer by name", e);
        }

        return List.of();
    }

    /** create customer */
    public CustomerDTO createCustomer(CustomerDTO customerDTO) {
        try {
            if (customerDTO.getId_customer() != null) {
                throw new IllegalArgumentException("Id will be generated by database");
            }
            Customer customer = CustomerMapper.INSTANCE.customerDTOToCustomer(customerDTO);
            if (customer==null) {
                throw new IllegalArgumentException("Customer cannot be null");
            }
            Customer savedCustomer = customerRepository.save(customer);
            return CustomerMapper.INSTANCE.customerToCustomerDTO(savedCustomer);
        } catch (Exception e) {
            log.error("Error creating customer", e);
        }

        return null;
    }

    /** update customer */
    public CustomerDTO updateCustomer(Long id, CustomerDTO customerDTO) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Customer customerFromDB = customerRepository.findById(id)
                    .orElseThrow(() -> new IllegalArgumentException("Customer does not exist"));
            Customer customer = CustomerMapper.INSTANCE.customerDTOToCustomer(customerDTO);
            customerFromDB.updateOnllyNecesary(customer);
            Customer savedCustomer = customerRepository.save(customerFromDB);
            return CustomerMapper.INSTANCE.customerToCustomerDTO(savedCustomer);
        } catch (Exception e) {
            log.error("Error updating customer", e);
        }

        return null;
    }

    /** delete customer */
    public boolean deleteCustomer(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            customerRepository.deleteById(id);
            return true;
        } catch (Exception e) {
            log.error("Error deleting customer", e);
        }

        return false;
    }

}
