package eshop.prod.database.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import eshop.prod.database.entities.Product;
import eshop.prod.database.entities.dto.ProductDTO;
import eshop.prod.database.entities.mappers.ProductMapper;
import eshop.prod.database.repository.ProductRepository;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class ProductService {
    // CRUD CREATE, READ, UPDATE, DELETE

    // READ ALL
    @Autowired
    private ProductRepository productRepository;

    public List<ProductDTO> getAllProducts() {
        try {
            List<Product> products = productRepository.findAll();
            return products.stream().map(ProductMapper.INSTANCE::productToProductDTO).toList();
        } catch (Exception e) {
            log.error("Error getting all products", e);
        }
        return List.of();
    }

    // READ ID
    public ProductDTO getProductById(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Product product = productRepository.findById(id).orElse(null);
            return ProductMapper.INSTANCE.productToProductDTO(product);
        } catch (Exception e) {
            log.error("Error getting product by id", e);
        }
        return null;
    }

    // CREATE
    public ProductDTO createProduct(ProductDTO productDTO) {
        try {
            if (productDTO.getId_product() != null) {
                throw new IllegalArgumentException("Id will be generated by database");
            }
            Product product = ProductMapper.INSTANCE.productDTOToProduct(productDTO);
            if (product == null) {
                throw new IllegalArgumentException("Product cannot be null");
            }
            product = productRepository.save(product);
            return ProductMapper.INSTANCE.productToProductDTO(product);
        } catch (Exception e) {
            log.error("Error creating product", e);
        }
        return null;
    }

    // UPDATE
    public ProductDTO updateProduct(Long id, ProductDTO productDTO) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Product productFromDB = productRepository.findById(id).orElse(null);
            if (productFromDB == null) {
                throw new IllegalArgumentException("Product cannot be null");
            }
            Product product = ProductMapper.INSTANCE.productDTOToProduct(productDTO);
            if (product == null) {
                throw new IllegalArgumentException("Product cannot be null");
            }
            productFromDB.updateOnlyNecessary(product);
            Product savedProduct = productRepository.save(productFromDB);
            return ProductMapper.INSTANCE.productToProductDTO(savedProduct);
        } catch (Exception e) {
            log.error("Error updating product", e);
        }
        return null;
    }

    // DELETE
    public boolean deleteProduct(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            productRepository.deleteById(id);
            return true;
        } catch (Exception e) {
            log.error("Error deleting product", e);
        }
        return false;
    }

    /* MÃ©todos del repository */

    /* search for products based on a search term */

    public List<ProductDTO> findByNameContaining(String name) {
        try {
            List<Product> products = productRepository.findBySearchTerm(name).orElse(null);
            if (products == null) {
                throw new IllegalArgumentException("Products not found");
            }
            return products.stream().map(ProductMapper.INSTANCE::productToProductDTO).toList();
        } catch (Exception e) {
            log.error("Error getting products by name", e);
        }
        return List.of();
    }

    /* Search for products that are in stock. */
    public List<ProductDTO> findByStockGreaterThanZero() {
        try {
            List<Product> products = productRepository.findByStockGreaterThanZero().orElse(null);
            if (products == null) {
                throw new IllegalArgumentException("Products not found");
            }
            return products.stream().map(ProductMapper.INSTANCE::productToProductDTO).toList();
        } catch (Exception e) {
            log.error("Error getting products by stock", e);
        }
        return List.of();
    }

    /* Search for products that do not exceed a certain price and stock */
    public List<ProductDTO> findByPriceLessThanAndStockGreaterThan(Double price, Double stock) {
        try {
            if (price == null || stock == null) {
                throw new IllegalArgumentException("Price and stock cannot be null");
            }
            List<Product> products = productRepository.findByPriceLessThanAndStockGreaterThan(price, stock).orElse(null);
            if (products == null) {
                throw new IllegalArgumentException("Products not found");
            }
            return products.stream().map(ProductMapper.INSTANCE::productToProductDTO).toList();
        } catch (Exception e) {
            log.error("Error getting products by price and stock", e);
        }
        return List.of();
    }
}
